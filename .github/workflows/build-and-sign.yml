name: Build and Sign
on:
  push:
    branches:
      - main
      - pre

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      # - name: webhook_url
      #   run: |
      #     echo {{secrets.WEBHOOK_FILL}} > ./bot/models/webhook_url.py
      #   shell: bash

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      # - name: Build
      #   uses: Nuitka/Nuitka-Action@main
      #   with:
      #     nuitka-version: main
      #     script-name: main.py
      #     disable-console: true
      #     enable-plugins: tk-inter
      #     windows-icon-from-ico: icon.ico
      #     output-dir: build
      #     output-file: ScryptTunes.exe
      #     include-data-files: icon.ico=icon.ico
      #     mode: standalone

      # - name: sign exe
      #   uses: dlemstra/code-sign-action@v1
      #   with:
      #     certificate: '${{ secrets.SIGNING_KEY }}'
      #     password: '${{ secrets.CERT_PASSWORD }}'
      #     files: './build/main.dist/ScryptTunes.exe'

      # - name: Install NSIS
      #   run: |
      #     iwr -useb get.scoop.sh -outfile 'install.ps1'
      #     .\install.ps1 -RunAsAdmin
      #     scoop update
      #     scoop bucket add extras
      #     scoop install nsis

      # - name: Create Installer
      #   run: makensis installer.nsi

      - name: Versatile PyInstaller
        uses: sayyid5416/pyinstaller@v1.8.0
        with:
          python_ver: '3.9'
          requirements: requirements.txt
          options: --onefile, --windowed, --noconsole, --icon=icon.ico
          spec: main.py
          
      # - name: sign installer
      #   uses: dlemstra/code-sign-action@v1
      #   with:
      #     certificate: '${{ secrets.SIGNING_KEY }}'
      #     password: '${{ secrets.CERT_PASSWORD }}'
      #     files: './build/ScryptTunesInstaller.exe'

      - name: Get version from file
        id: get_version
        run: |
          $version = Get-Content -Path VERSION -Raw
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Release for main branch
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: "./build/ScryptTunesInstaller.exe"
          skipIfReleaseExists: True
          tag: ${{ steps.get_version.outputs.version }}
          makeLatest: true

      - name: Release for pre branch
        if: github.event_name == 'pull_request' && github.base_ref == 'pre'
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: "./build/ScryptTunesInstaller.exe"
          skipIfReleaseExists: true
          tag: pre-v${{ steps.get_version.outputs.version }}
          prerelease: true
          generateReleaseNotes: false
          makeLatest: legacy
